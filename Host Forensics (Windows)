                                                         WINDOWS FORENSICS
MFT
------------
The Master File Table (MFT) is the primary source of metadata in NTFS. It contains or indirectly references everything about a file: 
its timestamps, size in bytes, attributes (such as permissions), parent directory, and contents.

Each NTFS volume will contain its own MFT, stored within the volume root as a file named $MFT.

 NTFS metadata files such as the $MFT are not accessible via Windows Explorer or other standard application programming interface (API) 
 file-access methods. 
 
 SI AND FN TIMESTAMPS
 ---------------------
 
 Fortunately, it is a bit more difficult to manipulate the $FN MACE timestamps
 
 Windows uses its $SI timestamps to set the $FN timestamps for the new MFT entry. Restoring the file to its original location and remodifying ensures that all 
 eight MACE timestamps match the desired values. This trick is often referred to as “double-time-stomping.
 
 $DATA
 -------------
 
 is named $DATA. This attribute typically provides a listing of the clusters on disk wherein a file’s contents reside
 
 Recall that a typical MFT entry has a fixed length of 1,024 bytes. That’s a decent amount of headroom for most files—even given 
 the plethora of attributes it tracks. So for efficiency’s sake, NTFS will actually store the complete contents of files under 
 approximately 700–800 bytes within the $DATA attribute itself
 
 
 $LOG
 -----------
 The NTFS log file, named $LogFile, tracks all transactions that change the structure of a volume. That includes file or directory creation/copy/deletes, 
 changes to file metadata, and changes to INDX records.
 
 $JRNAL
 ----------------
 The Update Sequence Number (USN) journal, named $UsnJrnl, provides a higher-level summary of changes to a volume. A given entry includes the type of change event that occurred, its corresponding timestamp, the file name, its attributes, and the MFT entry identifiers for the file and its parent directory. 
 The journal is located in path \$Extend\$UsnJrnl
 
 FILE SYSTEM REDIRECTOR
 ---------------------
 Windows provides a compatibility subsystem, Windows 32-bit on Windows 64-bit (WoW64), that helps ensure 32-bit applications run 
 properly on 64-bit operating systems.
 
  If a 32-bit application attempts to load a file from %SYSTEMROOT%\system32\, then WoW64 will transparently redirect it to the 
  directory %SYSTEMROOT%\SysWOW64\, which contains the proper 32-bit DLLs
 
 the actual %SYSTEMROOT%\system32\directory, which is reserved for 64-bit applications
 
 Windows maintains a separate Program Files directory, called \Program Files (x86)\, for 32-bit applications, 
 whereas 64-bit typically use the normal \Program Files\path.
 
 
 PREFETCH
 -------------
 Prefetch is a performance optimization mechanism that Microsoft introduced in Windows XP to reduce boot and application loading times
 
 Specifically, it tracks the first two minutes of boot processes and the first 10 seconds of all other applications’ startup
 
 Prefetch files are stored in %SYSTEMROOT%\Prefetch
 
 AppName-########.pf  Up to 128 application-specific prefetch files, each with the extension .pf, and each representing an 
 executable file that ran at least once. (def more, maybe 512 max I think or even 1024)
 
 EVENT VIEWER
 ---------------
 
 • Application  %SYSTEMROOT%\System32\Winevt\Logs\Application.evtx
• System  %SYSTEMROOT%\System32\Winevt\Logs\System.evtx
• Security  %SYSTEMROOT%\System32\Winevt\Logs\Security.evtx
 
 WINDOWS LOGON TYPE
 ---------------------
 Here is a brief description of each type:
• Interactive  The user logged on from the console (for example, from the host machine’s keyboard), via the RunAS command, 
  or from a hardware-based remote access solution (such as KVM).
• Network  The user logged on over the network. Mounting a share through the “net use” command or logging on to a web server 
  via IIS integrated authentication are both examples of activity that would generate a Network logon.
• Batch  The logon session generated by a scheduled task.
• Service  The Windows service logged on using its configured credentials.
• Unlock  The user unlocked the system (for example, after resuming from the screensaver).
• NetworkCleartext  Typically generated by basic authentication logins on web servers.
• NewCredentials  The user assumed a different set of credentials for a remote connection (such as through the use of the RunAs command).
• RemoteInteractive  The user logged on via Terminal Services, Remote Assistance, or Remote Desktop.
• CacheInteractive  The user logged on with domain credentials that were validated using locally cached data rather than contacting 
  the domain controller.
  
 Process Tracking
 ------------------------
Process tracking, also known as detailed tracking or process auditing, generates an event in the Security event log every time a 
process is executed or terminated. These events include the full path to the executable on disk, the process ID, 
the parent process ID, and the associated logon ID under which it executed.

every time a service is started or stopped, the Service Control Manager (SCM) creates an entry in the System event log.

.job Files
----------------
Configuration data for scheduled tasks is stored in .job files—one per task—within the %SYSTEMROOT%\Tasks directory

%SYSTEMROOT%\Tasks\SchedLgU.txt - Task Scheduler Logs

REGISTRY
-----------------
Windows maintains five main registry hives in the path %SYSTEMROOT%\system32\config: SYSTEM, SECURITY, SOFTWARE, SAM, and DEFAULT

The root registry keys are as follows:
• HKEY_LOCAL_MACHINE (aka HKLM)
• HKEY_USERS (aka HKU)
• HKEY_CURRENT_USER (aka HKCU)
• HKEY_CURRENT_CONFIG (aka HKCC)
• HKEY_CLASSES_ROOT

• HKU\{SID} exists for each user security identifier (SID) on the system. The subkey for each SID maps to the 
corresponding user’s NTUSER.DAT hive file.
• HKU\{SID}_Classes exists for each user SID on the system. The subkey for each SID maps to the corresponding user’s 
USRCLASS.DAT hive file.
* HKEY_CURRENT_USER is simply a symbolic link to HKEY_USERS\{SID}\ for the user currently logged in to the console.
* HKEY_CURRENT_CONFIG maps to HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Hardware Profiles\XXXX, where XXXX is a four-digit number
representing the active profile. CurrentControlSet, referenced within the aforementioned path, is itself a link that 
points to HKLM\SYSTEM\ControlSetXXX, where XXX is a three-digit number representing the active configuration control set.
* HKEY_CLASSES_ROOT is presented as a merged set of subkeys from HKLM\Software\Classes and HKEY_CURRENT_USER\Software\Classes


* On a 64-bit version of Windows, 64-bit applications can access the registry path HKEY_LOCAL_MACHINE\SOFTWARE\. A 32-bit 
application may attempt to access the same path, but WOW64 will instead transparently redirect it to the 
path HKEY_LOCAL_MACHINE\SOFTWARE\WoW6432Node\

*** Images ***

![NetSec](https://github.com/Phemix/Training/blob/master/sysinfo.png)


Shim Cache
The Shim Cache, also known as the Application Compatibility Cache

HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\AppCompatCache\AppCompatCache

Services
Each service will have its own set of values and subkeys under HKLM\CurrentControlSet\services\{servicename}\,

The majority of Windows services are implemented as DLLs rather than standalone executable files. In order to properly load and
execute the code within these DLLs, Windows relies on a hosting process, svchost.exe.

 The Windows Service Control Manager (SCM), services.exe, is responsible for launching Windows services upon startup
 You can also invoke the Services Management snap-in, services.msc, from the Run menu to review and edit the configuration 
 of existing services.
 
  You can also use the tasklist /svc console command (native to Windows) to list the services running under each svchost.exe process. 
  
  • HKLM\SOFTWARE\Microsoft\​Windows\CurrentVersion\Run
• HKLM\SOFTWARE\Microsoft\Windows​\CurrentVersion\RunOnce
• HKEY_USERS\{SID}\SOFTWARE\Microsoft​\Windows\CurrentVersion\RunOnce
• HKEY_USERS\{SID}\SOFTWARE\Microsoft​\Windows\CurrentVersion\RunOnce


Active Setup  
Active Setup is a mechanism provided by Windows to facilitate software installation and update across all users on a system

• HKLM\SOFTWARE\Microsoft\​Active Setup\Installed Components
• HKEY_USERS\{SID}\SOFTWARE\​Microsoft\Active Setup\Installed Components


AppInit_DLLs 
The AppInit_DLLs registry value contains a list of DLLs that will be automatically loaded whenever any user-mode application that 
is linked to user32.dll is launched
user32.dll is a module that contains Windows API functions related the Windows user interface (Window handling, basic UI functions, 
and so forth)

HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs

Each of these values is of type REG_MULTI_SZ, meaning that the data will be a set of null-terminated strings. 
Moreover, packages can be referenced without supplying the .DLL file extension

LSA Packages  
Three registry keys configure the Windows Local Security Authority (LSA) and how it handles authentication events. Windows automatically loads the DLLs specified within these values upon system bootup:
• HKLM\System\CurrentControlSet\Control\Lsa\Authentication Packages
• HKLM\System\CurrentControlSet\Control\Lsa\Notification Packages
• HKLM\System\CurrentControlSet\Control\Lsa\Security Packages

Browser Helper Objects  
Browser Helper Objects (BHOs) serve as add-ons or plugins for Internet Explorer

BHO DLLs are Component Object Model (COM) components that get loaded into the Internet Explorer process space each time 
a new instance of iexplore.exe
HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects\{CLSID}\
Next, for each CLSID of interest, refer to HKEY_CLASSES_ROOT\CLSID\{CLSID}\InprocServer32\(Default).

Shell Extensions  
Shell extensions are to Windows Explorer as Browser Helper Objects are to Internet Explorer.
The handlers for each of these items are listed under HKCR\{sub-key}\shellex\.

Winlogon Shell  
Windows provides users with the ability to customize the shell that is loaded upon user logon. By default, this is set to Explorer.exe;
• HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
• HKEY_USERS\{SID}\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell

Winlogon Userinit
HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit
By default, this is set to userinit, which ensures that %SYSTEMROOT%\system32\userinit.exe will execute. In turn, userinit.exe is 
responsible for loading logon and group policy scripts, several other auto-runs, and the Explorer shell. 

User Hive investigations
 several user-specific keys that we’ve found to be the most helpful during our incident response investigations: 
 Shellbags, UserAssist, MUICache, Most Recently Used (MRU), TypedURLs, and TypedPaths.
 
 Shellbags  Have you ever noticed that Windows Explorer will consistently restore previously open windows with the exact same size, 
 position, and view configuration (including visible columns)? If so, you’ve seen shellbags at work: 
 • HKEY_USERS\{SID}\Software\​Microsoft\Windows\Shell\
 
 UserAssist  
 The UserAssist key tracks applications that a user has launched through the Windows Explorer shell:
 HKEY_USERS\{SID}\Software\​Microsoft\Windows\CurrentVersion​\Explorer\UserAssist
 
 MUICache  
 The MUICache registry key provides yet another source of evidence for programs that were previously executed by a user.
 HKEY_USERS\​{SID}_Classes\Local Settings\Software\Microsoft​\Windows\Shell\MuiCache
 
 Most Recently Used (MRU) Keys  
 Windows operating system components and applications all can use registry keys to track most recently used (MRU) items. 
 MRU keys are typically stored within the NTUSER.DAT hives rather than system-wide registry hives.
 
 Explorer Open and Save MRU 
 Windows Explorer maintains several sets of registry keys under ComDlg32 that track the files and directories most recently 
 accessed in the Open and Save As dialog menus:
 • HKEY_USERS\{SID}\Software​\Microsoft\Windows\CurrentVersion\​Explorer\ComDlg32\OpenPidlMRU
• HKEY_USERS\{SID}\Software\Microsoft​\Windows\CurrentVersion\Explorer​\ComDlg32\LastVisitedPidlMRU
• HKEY_USERS\{SID}\Software\Microsoft​\Windows\CurrentVersion\Explorer​\ComDlg32\CIDSizeMRU

Start Menu Run MRU  
This key tracks a list of applications that have been previously executed through the Start menu’s Run dialog:
HKEY_USERS\{SID}\Software​\Microsoft\Windows\CurrentVersion​\Explorer\RunMRU

RecentDocs  
The RecentDocs key contains a list of recently opened files (not just documents—any extension) used to populate the File menus of 
various applications:

Remote Desktop MRU  
The Remote Desktop Connection utility (also known as the Terminal Services or Server Client) provides users with
the ability to establish Remote Desktop Protocol (RDP) sessions to other Windows systems. 

• HKEY_USERS\{SID}\Software\Microsoft\Terminal Server Client\Default\
• HKEY_USERS\{SID} \Software\Microsoft\Terminal Server Client\Servers\

LNK Files
Windows shortcut files, also known as “link files” due to their extension (.lnk), act as pointers to other files or folders on a system.
Link files differ from symbolic links insofar as they only serve as extensions for Windows Explorer, whereas a symbolic link can be 
transparently acted upon as if it were its target file by any program.
• C:\Documents and Settings\%USERNAME%\Recent\
• C:\Documents and Settings\%USERNAME%\Application Data\Microsoft\Office\Recent\

Although LNK files contain human-readable strings and can be examined in a hex editor, we recommend using tools designed to recognize 
their format and provide decoded output. 

Jump Lists
Windows 7 added Jump Lists as a new taskbar navigation feature. Right-clicking a taskbar icon produces a pop-up menu that can include 
recently accessed items, frequently accessed items, and application-specific actions.
• C:\Users\%USERNAME%\AppData\​Roaming\Microsoft\Windows\​Recent\AutomaticDestinations
• C:\Users\%USERNAME%\AppData\​Roaming\Microsoft\Windows\​Recent\CustomDestinations

Recycle Bin
/c/$Recycle.Bin is the root of recyle bin and users access the instance of their SID

Get S-ID
WMIC useraccount get name,sid in Windows Command Prompt

HKEY_USERS\{SID}\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs



MEMORY FORENSICS
Like most modern operating systems, Windows provides a virtual memory subsystem that can use both RAM and hard disk space together as 
a single source of “memory” for running processes. “Memory” on a Windows system therefore is composed of two fundamental components: 
physical memory and the pagefile. 

  Physical Memory
The term “physical memory” simply refers to the contents of RAM. We acquire the contents of physical memory by taking an image of it

The Pagefile
The pagefile is a key component of memory architecture in most modern operating systems. It provides a secondary storage location, 
typically residing on a slower fixed drive, for data used by running processes that cannot fit within physical memor

The kernel maintains a table that tracks where each “page” in virtual memory actually resides—either at a real memory address or
within the page file—and shuttles data back and forth as needed

Windows stores the pagefile at %SYSTEMDRIVE%\pagefile.sys by default, but its name and location can be changed to any volume and 
even to be split across multiple files. If it’s missing, refer to registry key and value 
HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PagingFiles

Crash Dumps
In the event of a system crash, Windows can automatically generate “crash dump” files that contain some or all of the contents of memory.

 Kernel Memory Dump  This is the default setting for Windows Vista, 7, Server 2008, and later. It contains all the kernel’s 
 read/write memory pages at the time of the crash, as well a list of processes and loaded drivers. 
• Small Memory Dump (aka Minidump)  Contains a limited set of data, including the currently loaded drivers, processor context,
kernel call stack, and metadata for the halted process and thread. These files are usually under 5MB in size. 
Minidump files are stored in %SYSTEMROOT%\Minidump\ by default; 
this path can be changed by modifying the registry value HKLM\SYSTEM\CurrentControlSet\Control\CrashControl\MinidumpDir.
• Complete memory dump  Contains a full image of physical memory. These files will be the same size as the amount of physical memory 
installed on the system. Users cannot select this option through the Startup and Recovery UI,
but can manually enable it by setting the registry value HKLM\SYSTEM\CurrentControlSet\Control\CrashControl\CrashDumpEnabled to 1. 
Complete memory dumps are saved to %SYSTEMROOT%\memory.dmp by default; this path can be changed by 
modifying the registry value HKLM\SYSTEM\CurrentControlSet\Control\CrashControl\DumpFile.


Hibernation Files
Upon powering up, Windows reads the contents of the hibernation file and writes it back to memory, resulting in a restored and 
intact user session. The default path of the hibernation file is %SYSTEMDRIVE%\Hiberfil.sys.

Memory Analysis
Through memory analysis, we can reconstruct the same sort of data by enumerating kernel data structures, 
known as Executive Process (EPROCESS) blocks, that account for each running process on a system.

Note that processes only track their parent PID and not the parent process name or path. It’s up to your analysis tool to walk 
through all PIDs and map out the parent-child relationships into a hierarchy or tree. 
This is also why it is not possible to identify a running process’s parent once it has terminated—the parent 
PID won’t map back to anything that’s currently running.


Sections
Each process in memory has its own virtual address space—essentially a range of addresses, allocated by the memory manager, 
that it can use to read/write data and execute code.

section analysis can allow you to identify all the DLLs loaded by a running process in memory.

Credentials  
The Mimikatz toolkit can recover Windows account passwords, both hashes and clear text, by reading and parsing the 
contents of the Local Security Authority Subsystem Service (LSASS) memory, commonly running as lsass.exe.

Pagefile Analysis
How do you analyze an acquired pagefile.sys? Unfortunately, the pagefile has no intrinsic structure, which significantly limits your
available analysis techniques. The most common approach is to run “strings” against the file and search its contents for keywords of 
interest. Certain search techniques, such as looking for references to cmd. exe or other remnants of command shell usage

Process Injection  
In process injection, a malicious injecting process causes a legitimate process (the injected) to load and execute the code of 
its choice. Once this occurs successfully, the injecting process can terminate and allow the injected process to continue running 
its malicious code as designed. 


Hooking  
Broadly speaking, “hooking” allows code within running processes to intercept, view, and modify events such as function calls and 
the data they return.

Persistence MEchanisms
Startup Folders
Startup folders are among the most rudimentary persistence mechanisms available in Windows
On Windows Vista and Windows 7, the “all users” Startup folder is located at 
C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup, and the user-specific Startup folder is 
located at C:\Users\[username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup.

DLL Load-Order Hijacking
Load-order hijacking, also known as “search-order hijacking,” takes advantage of the process by which a program loads its DLL dependencies.

 

